{"status":"OK","message":"","body":"{\n  \"paragraphs\": [\n    {\n      \"text\": \"%md\\n# Conway\\u0027s Game of Life\\nThe purpose of this task is to run a version of [Conway\\u0027s Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life) using Kompics component for each cell.\\n\\nAll the Kompics relevant code is already implemented for you, however, and you only need to fill in the following 4 rules:\\n1. Any live cell with fewer than two live neighbours dies, as if caused by under-population.\\n2. Any live cell with two or three live neighbours lives on to the next generation.\\n3. Any live cell with more than three live neighbours dies, as if by over-population.\\n4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\\n \\nImplement these rules at the marked position in the code below.\\n\\nNote that while this is a graded assignment, there are no tests and the assignment always passes automatically.\\nThe purpose is merely for you to experiment with the zeppelin environment and familiarise yourself with the assignment submission procedure.\\n\\nOnce you have the basic version working, feel free to experiment with different initial state generators, and numbers of generations.\\n\\nSimply submit the assignment whenever you feel ready.\\n\",\n      \"dateUpdated\": \"Sep 18, 2016 1:22:34 PM\",\n      \"config\": {\n        \"colWidth\": 12.0,\n        \"editorMode\": \"ace/mode/markdown\",\n        \"editorHide\": true,\n        \"graph\": {\n          \"mode\": \"table\",\n          \"height\": 350.433349609375,\n          \"optionOpen\": false,\n          \"keys\": [],\n          \"values\": [],\n          \"groups\": [],\n          \"scatter\": {}\n        },\n        \"enabled\": true\n      },\n      \"settings\": {\n        \"params\": {},\n        \"forms\": {}\n      },\n      \"jobName\": \"paragraph_1473013852274_-362170140\",\n      \"id\": \"20160902-193003_1338549382\",\n      \"result\": {\n        \"code\": \"SUCCESS\",\n        \"type\": \"HTML\",\n        \"msg\": \"\\u003ch1\\u003eConway\\u0027s Game of Life\\u003c/h1\\u003e\\n\\u003cp\\u003eThe purpose of this task is to run a version of \\u003ca href\\u003d\\\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\\\"\\u003eConway\\u0027s Game of Life\\u003c/a\\u003e using Kompics component for each cell.\\u003c/p\\u003e\\n\\u003cp\\u003eAll the Kompics relevant code is already implemented for you, however, and you only need to fill in the following 4 rules:\\u003c/p\\u003e\\n\\u003col\\u003e\\n\\u003cli\\u003eAny live cell with fewer than two live neighbours dies, as if caused by under-population.\\u003c/li\\u003e\\n\\u003cli\\u003eAny live cell with two or three live neighbours lives on to the next generation.\\u003c/li\\u003e\\n\\u003cli\\u003eAny live cell with more than three live neighbours dies, as if by over-population.\\u003c/li\\u003e\\n\\u003cli\\u003eAny dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\\u003c/li\\u003e\\n\\u003c/ol\\u003e\\n\\u003cp\\u003eImplement these rules at the marked position in the code below.\\u003c/p\\u003e\\n\\u003cp\\u003eNote that while this is a graded assignment, there are no tests and the assignment always passes automatically.\\n\\u003cbr  /\\u003eThe purpose is merely for you to experiment with the zeppelin environment and familiarise yourself with the assignment submission procedure.\\u003c/p\\u003e\\n\\u003cp\\u003eOnce you have the basic version working, feel free to experiment with different initial state generators, and numbers of generations.\\u003c/p\\u003e\\n\\u003cp\\u003eSimply submit the assignment whenever you feel ready.\\u003c/p\\u003e\\n\"\n      },\n      \"dateCreated\": \"Sep 4, 2016 8:30:52 PM\",\n      \"status\": \"READY\",\n      \"errorMessage\": \"\",\n      \"progressUpdateIntervalMs\": 500\n    },\n    {\n      \"text\": \"import se.kth.edx.id2203.tutorial.gameoflife._\\nimport se.kth.edx.id2203.validation._\\nimport se.kth.edx.id2203.core._\\nimport java.util.Random;\\nimport se.sics.kompics.sl._\\nimport se.sics.kompics.{ Kompics }\\n\\ncase class CellCInit(x: Int, y: Int, init: State.Initializer) extends se.sics.kompics.Init[Cell]\\n\\nclass CellC(init: CellCInit) extends Cell { // class Cell is a KompicsComponent\\n    // this cell\\u0027s location in the grid\\n    val xPos \\u003d init.x;\\n    val yPos \\u003d init.y;\\n    // get the initial state from the State.Initializer (see below this class)\\n    private var state: State \\u003d init.init.apply(xPos, yPos);\\n    // initialize our view of our neighbours\\n    private val view \\u003d scala.collection.mutable.Map.empty[Tuple2[Int, Int], State];\\n    // keep track of the generation we are currently communicating on to not mix up delayed messages\\n    private var lastGen \\u003d -1l;\\n\\n    // declare our ports (the same one but in both directions for broadcasting to neighbours and receiving their broadcasts)\\n    val envIn \\u003d requires(EnvironmentPort);\\n    val envOut \\u003d provides(EnvironmentPort);\\n    // handle messages on incoming environment port\\n    envIn uponEvent {\\n        case Progress(generation) \\u003d\\u003e handle {\\n            //println(s\\\"Cell($xPos, $yPos) starting generation $generation as $state\\\"); // uncomment if you want to see some printouts\\n            // for every generaton broadcast our current state\\n            trigger(BroadcastState(generation, xPos, yPos, state) -\\u003e envOut);\\n            // and prepare to receiver other\\u0027s states\\n            if (lastGen \\u003c generation) {\\n                view.clear();\\n                lastGen \\u003d generation;\\n            }\\n        }\\n        case BroadcastState(generation, x, y, otherState) \\u003d\\u003e handle {\\n            // same as above, just in case we get another component\\u0027s state broadcast before the instruction to move to the next generation\\n            if (lastGen \\u003c generation) {\\n                view.clear();\\n                lastGen \\u003d generation;\\n            }\\n            // add the received state to our view\\n            view +\\u003d ((x -\\u003e y) -\\u003e otherState);\\n            //println(s\\\"Cell($xPos, $yPos) got state $otherState from Cell($x, $y) leading to: $view\\\");  // uncomment if you want to see some printouts\\n            if (view.size \\u003d\\u003d 8) { // once we get the last state broadcast in a generation (from everyone around us: 3x3-1)\\n                // count live cells in our neighbourhood\\n                val liveC \\u003d view.values.count {\\n                    case Alive \\u003d\\u003e true\\n                    case _     \\u003d\\u003e false\\n                };\\n                // apply game of life rules to decide our next state based on current state and live count\\n                // **********************************\\n                // ******* STUDENT CODE HERE ********\\n                // **********************************\\n                val condTuple \\u003d (state, liveC)\\n                state \\u003d condTuple match {\\n                    case (Alive, liveC) if liveC \\u003c 2 \\u003d\\u003e Dead\\n                    case (Alive, 2) \\u003d\\u003e Alive\\n                    case (Alive, 3) \\u003d\\u003e Alive\\n                    case (Alive, liveC) if liveC \\u003e 3 \\u003d\\u003e Dead\\n                    case (Dead, 3) \\u003d\\u003e Alive\\n                    case (Dead, _) \\u003d\\u003e Dead\\n                }\\n                \\n            }\\n        }\\n    }\\n}\\n\\n\\nval rand \\u003d new Random(System.currentTimeMillis());\\n// randomly generate the initial state (easy but boring...try to do something more interesting if you like)\\nval defaultInit: State.Initializer \\u003d (x: Int, y: Int) \\u003d\\u003e {\\n    if (rand.nextBoolean()) {\\n        Alive\\n    } else {\\n        Dead\\n    }\\n}\\n// just a way to generate a child init object from a method\\nval toCellCInit: Cell.Initializer \\u003d {\\n    case (x: Int, y: Int, init: State.Initializer) \\u003d\\u003e CellCInit(x, y, init).asInstanceOf[se.sics.kompics.Init[Cell]]\\n};\\n\\nval cellclass \\u003d classOf[CellC].asInstanceOf[Class[Cell]] // nvm some ugly type magic...Java Kompics is sometimes a bit overspecific on what types it wants\\nrunKompics[ParentC](GameOfLifeInit(defaultInit, cellclass, toCellCInit, numGenerations \\u003d 10)); // create the Kompics environment and wait for it to finish\\n\\ncheckExample[ParentC] // generate grading token\\n    \\n    \",\n      \"dateUpdated\": \"Sep 18, 2016 1:20:40 PM\",\n      \"config\": {\n        \"editorMode\": \"ace/mode/scala\",\n        \"colWidth\": 12.0,\n        \"enabled\": true,\n        \"graph\": {\n          \"mode\": \"table\",\n          \"height\": 300.0,\n          \"optionOpen\": false,\n          \"keys\": [],\n          \"values\": [],\n          \"groups\": [],\n          \"scatter\": {}\n        }\n      },\n      \"settings\": {\n        \"params\": {},\n        \"forms\": {}\n      },\n      \"jobName\": \"paragraph_1473013852276_-364478634\",\n      \"id\": \"20160615-191351_1691822922\",\n      \"result\": {\n        \"code\": \"SUCCESS\",\n        \"type\": \"HTML\",\n        \"msg\": \"Starting generation 0...\\u003cbr /\\u003e\\u003cp\\u003e\\u003cb\\u003eTo see the generated output click \\u003c/b\\u003e\\u003ca href\\u003d\\\"static/goltest.html\\\" target\\u003d\\\"_blank\\\"\\u003ehere\\u003c/a\\u003e\\u003c/p\\u003e\\u003cbr /\\u003e\\u003cbr /\\u003eYour submission has been locally simulated and validated.\\u003cbr /\\u003e\\u003cbr /\\u003e\\u003ca href\\u003d\\\"\\\\static\\\\log.txt\\\" target\\u003d\\\"_blank\\\"\\u003eClick Here\\u003c/a\\u003e to view the output of the simulation.\\u003cbr /\\u003e\\u003cstyle type\\u003d\\\"text/css\\\"\\u003e.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}.tg .tg-mb3i{background-color:#D2E4FC;text-align:right;vertical-align:top}.tg .tg-lqy6{text-align:right;vertical-align:top}.tg .tg-vlnx{background-color:#3071a9;color:#ffffff;text-align:center;vertical-align:top}.tg .tg-6k2t{background-color:#D2E4FC;vertical-align:top}.tg tg-6k2l{background-color:#ffb3b3;vertical-align:top}.tg .tg-yw4l{vertical-align:top}\\u003c/style\\u003e\\u003ctable class\\u003d\\\"tg\\\"\\u003e  \\u003ctr\\u003e    \\u003cth class\\u003d\\\"tg-vlnx\\\" colspan\\u003d\\\"3\\\"\\u003eCorrection Results\\u003c/th\\u003e  \\u003c/tr\\u003e\\u003cbr /\\u003e\\u003ctr\\u003e    \\u003ctd class\\u003d\\\"tg-6k2t\\\"\\u003ePASSED\\u003c/td\\u003e \\u003ctd class\\u003d\\\"tg-6k2t\\\"\\u003eExample Run\\u003c/td\\u003e \\u003ctd class\\u003d\\\"tg-6k2t\\\"\\u003e✔: You have run the example successfully!\\u003cbr\\u003e\\u003c/td\\u003e  \\u003c/tr\\u003e  \\u003cbr /\\u003e\\u003c/table\\u003e\\u003cbr /\\u003eFinal Comments\\u003cbr /\\u003e**************\\u003cbr /\\u003eCongratulations! Your implementation of the \\u0027Game of Life\\u0027 satisfies all properties! \\u003cbr /\\u003eA unique token has been generated for your submission right below. Please do not edit. \\u003cbr /\\u003e\\u003cbr /\\u003e{\\\"gradingToken\\\":[45,45,45,45,45,66,69,71,73,78,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10,86,101,114,115,105,111,110,58,32,66,67,80,71,32,118,49,46,53,53,10,10,104,81,73,77,65,57,79,116,77,118,84,69,98,74,49,102,65,82,65,65,111,66,81,43,106,66,57,87,89,108,87,71,110,86,110,81,104,120,73,112,83,104,76,53,53,87,69,50,74,101,57,83,86,80,68,66,116,102,71,104,99,83,115,83,10,109,110,82,87,47,55,120,67,106,71,102,116,111,87,101,101,75,100,76,107,77,68,70,90,52,99,78,106,78,122,88,73,114,89,67,116,122,54,82,114,69,66,118,52,110,76,75,107,43,83,99,98,73,72,75,80,72,53,84,55,66,117,111,79,10,120,76,104,81,115,67,65,113,80,54,76,77,113,114,79,87,117,73,120,43,84,108,77,82,86,82,79,43,78,119,68,55,97,107,71,121,47,52,86,110,109,70,101,113,54,54,70,48,52,50,103,88,103,51,106,115,85,69,111,43,110,109,117,107,10,119,48,76,86,113,70,73,98,75,102,66,70,100,86,52,97,106,90,85,118,89,66,48,84,77,43,54,121,105,78,80,97,65,70,113,121,74,87,114,81,97,56,121,101,112,102,107,85,51,81,69,82,98,84,106,72,85,97,75,74,116,108,73,71,10,78,112,102,69,89,97,119,104,106,118,98,50,110,99,74,66,99,85,74,101,47,117,81,81,67,88,74,110,70,81,51,72,68,69,89,82,82,55,51,78,120,77,84,101,75,68,77,68,51,101,69,102,111,78,82,118,107,115,114,86,49,78,111,98,10,89,50,75,75,109,72,55,53,97,50,87,89,117,88,120,89,109,73,74,89,77,98,86,47,86,47,69,81,48,88,81,86,49,109,120,77,99,121,114,65,53,76,78,90,116,109,57,106,81,77,87,83,90,57,104,122,117,106,101,119,69,52,47,56,10,77,43,67,88,100,101,121,100,73,82,82,105,43,114,77,79,113,81,110,49,48,121,66,49,105,111,74,89,51,83,116,88,75,99,101,57,109,74,116,90,51,56,74,72,65,73,108,79,111,118,56,83,122,106,67,82,109,113,97,88,122,113,113,53,10,49,68,75,74,100,81,105,47,56,104,48,89,47,77,87,115,114,53,65,90,56,54,115,120,109,111,110,108,120,86,115,110,116,76,79,112,52,54,113,80,76,84,70,110,109,78,56,48,56,107,86,101,114,110,121,50,122,99,101,49,53,101,79,102,10,105,85,113,118,112,55,47,109,99,115,109,110,50,76,52,73,99,79,75,73,109,106,117,114,55,97,83,110,98,117,103,116,101,118,103,43,114,75,110,121,117,115,100,80,82,48,107,105,106,113,51,55,116,74,81,85,119,100,99,57,74,81,119,52,10,103,48,73,109,122,75,118,68,122,100,87,87,100,77,54,65,48,77,116,107,72,97,43,57,76,103,43,82,72,106,70,98,55,53,43,73,113,82,97,113,114,109,121,102,50,106,97,48,104,53,49,86,116,105,102,88,81,105,97,100,43,112,90,120,10,73,51,97,74,109,57,103,81,77,57,108,52,116,71,81,104,114,102,82,120,79,53,109,108,83,105,85,49,115,86,51,77,68,43,108,83,122,106,118,82,115,76,105,121,122,109,66,85,78,88,66,115,84,51,118,49,107,113,86,89,79,113,72,83,10,108,103,69,52,81,80,78,97,100,87,109,69,77,66,97,108,102,77,118,52,53,107,76,53,97,72,98,84,108,65,121,83,97,117,122,84,55,67,108,66,100,90,82,68,80,89,84,87,77,99,106,121,70,43,87,97,72,54,76,65,54,112,49,55,10,80,57,71,118,52,69,50,97,107,74,71,106,115,105,112,113,81,109,65,74,87,78,51,122,112,108,86,122,43,116,50,48,116,118,56,85,103,116,104,87,57,85,72,116,122,79,68,100,99,97,100,106,66,116,103,121,97,121,101,112,120,51,83,70,10,54,108,89,111,56,73,97,109,43,98,72,75,57,107,102,112,100,109,86,120,79,65,99,121,52,98,66,102,89,70,87,87,53,78,69,100,57,52,104,106,50,105,68,100,70,65,83,108,57,68,106,82,108,87,99,110,109,116,68,67,107,116,85,117,10,51,80,103,122,51,100,78,115,75,81,61,61,10,61,116,108,73,55,10,45,45,45,45,45,69,78,68,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10]}\\u003cbr /\\u003eimport se.kth.edx.id2203.tutorial.gameoflife._\\u003cbr /\\u003eimport se.kth.edx.id2203.validation._\\u003cbr /\\u003eimport se.kth.edx.id2203.core._\\u003cbr /\\u003eimport java.util.Random\\u003cbr /\\u003eimport se.sics.kompics.sl._\\u003cbr /\\u003eimport se.sics.kompics.Kompics\\u003cbr /\\u003edefined class CellCInit\\u003cbr /\\u003edefined class CellC\\u003cbr /\\u003erand: java.util.Random \\u003d java.util.Random@5e6db58\\u003cbr /\\u003edefaultInit: se.kth.edx.id2203.tutorial.gameoflife.State.Initializer \\u003d \\u003cfunction2\\u003e\\u003cbr /\\u003etoCellCInit: se.kth.edx.id2203.tutorial.gameoflife.Cell.Initializer \\u003d \\u003cfunction1\\u003e\\u003cbr /\\u003ecellclass: Class[se.kth.edx.id2203.tutorial.gameoflife.Cell] \\u003d class CellC\\u003cbr /\\u003e\"\n      },\n      \"dateCreated\": \"Sep 4, 2016 8:30:52 PM\",\n      \"dateStarted\": \"Sep 18, 2016 1:20:40 PM\",\n      \"dateFinished\": \"Sep 18, 2016 1:20:43 PM\",\n      \"status\": \"FINISHED\",\n      \"progressUpdateIntervalMs\": 500\n    },\n    {\n      \"dateUpdated\": \"Sep 4, 2016 8:30:52 PM\",\n      \"config\": {\n        \"editorMode\": \"ace/mode/scala\",\n        \"colWidth\": 12.0,\n        \"enabled\": true,\n        \"graph\": {\n          \"mode\": \"table\",\n          \"height\": 300.0,\n          \"optionOpen\": false,\n          \"keys\": [],\n          \"values\": [],\n          \"groups\": [],\n          \"scatter\": {}\n        }\n      },\n      \"settings\": {\n        \"params\": {},\n        \"forms\": {}\n      },\n      \"jobName\": \"paragraph_1473013852276_-364478634\",\n      \"id\": \"20160615-191928_480262104\",\n      \"dateCreated\": \"Sep 4, 2016 8:30:52 PM\",\n      \"status\": \"READY\",\n      \"errorMessage\": \"\",\n      \"progressUpdateIntervalMs\": 500\n    }\n  ],\n  \"name\": \"Example - Game of Life\",\n  \"id\": \"2BUVMFYPX\",\n  \"angularObjects\": {\n    \"2BKQCVH92:shared_process\": [],\n    \"2BMXUXUJ6:shared_process\": []\n  },\n  \"config\": {},\n  \"info\": {}\n}"}